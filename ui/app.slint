import { TextEdit , GridBox, Button, HorizontalBox , ComboBox, VerticalBox} from "std-widgets.slint";
import "fonts/Segoe_UI.ttf";

export global CustomNoteBuilder_Logic {
    in-out property <image> image;
    in-out property <string> file_name;
    callback change_icon_pressed();
    callback path_clear_pressed();
    callback load_icon();
    callback info_pressed();
    callback build();
}

component BootloaderScreen inherits Rectangle {
    in property <int> text_color_index;
    in property <int> font_color_index;
    property <[color]> bios_color: [
        rgb(0, 0, 0), // Black
        rgb(0, 0, 255), // Blue
        rgb(0, 255, 0), // Green
        rgb(0, 255, 255), // Cyan
        rgb(255, 0, 0), // Red
        rgb(255, 0, 255), // Magenta
        rgb(165, 42, 42), // Brown
        rgb(211, 211, 211), // Light Gray
        rgb(169, 169, 169), // Dark Gray
        rgb(173, 216, 230), // Light Blue
        rgb(144, 238, 144), // Light Green
        rgb(224, 255, 255), // Light Cyan
        rgb(255, 182, 193), // Light Red
        rgb(255, 105, 180), // Light Magenta
        rgb(255, 255, 0), // Yellow
        rgb(255, 255, 255) // White
    ];
    // Change Text Color Callback
    pure callback text_changed_value(int) -> color;
    text_changed-value(x) => {
        bios-color[x];
    }
    background: text_changed-value(text_color_index);
    out property <string> text <=> Screen.text;
    width: 591px;
    height: 307px;
    border-width: 1px;
    border-color: white;
    Screen := TextInput {
        // Change Font Color Callback
        pure callback font_changed_value(int) -> color;
        font_changed-value(x) => {
            bios-color[x];
        }
        x: 5px;
        y: 5px;
        color: font_changed-value(font_color_index);
        width: parent.width - 1px;
        height: parent.height - 1px;
        font-size: 11px;
        text: "Created by KimWang906. Click here to change the text!";
        wrap: word-wrap;
    }
}

component IconStatus inherits Rectangle {
    in-out property <image> load_path <=> CustomNoteBuilder_Logic.image;
    width: 64px;
    height: 64px;
    background: gray;
    border-width: 2px;
    border-color: black;
    y: 20px;
    Image {
        source: load-path;
        width: parent.width - 2px;
        height: parent.height - 2px;
    }
}

component IconFilenameText inherits Rectangle {
    in property <string> file_name;
    width: 128px;
    height: 20px;
    border-width: 2px;
    border-color: black;
    background: white;
    TextInput {
        x: 3px;
        text: file-name;
        read-only: true;
        font-size: 14px;
        color: black;
    }
}

component IconButton {
    HorizontalBox {
        spacing: 5px;
        Button {
            text: "Change Icon";
            clicked => {
                CustomNoteBuilder-Logic.change-icon-pressed();
            }
        }
        Button {
            text: "Clear";
            clicked => {
                CustomNoteBuilder-Logic.path-clear-pressed();
            }
        }
     }
}

component OptionComboBox inherits Rectangle {
    in property <string> title;
    in property <[string]> values;
    in property <int> set_index;
    out property <string> curr <=> list.current_value;
    out property <int> index <=> list.current-index;
    Text {
        x: 10px;
        y: 10px;
        width: self.preferred-width;
        height: self.preferred-height;
        text: title;
    }
    list := ComboBox { 
        x: 80px;
        y: 10px;
        model: values;
        current-index: set_index;
     }
}

component IconFunc {
    in property <string> load_filename <=> CustomNoteBuilder-Logic.file-name;
    VerticalBox {
        spacing: 0px;
        IconButton {}
        IconFilenameText {
            file-name: load-filename;
        }
    }
}

component CustomOption {
    out property <string> text <=> text_color.curr;
    out property <int> text_index <=> text_color.index;
    out property <string> font <=> font_color.curr;
    out property <int> font_index <=> font_color.index;
    out property <string> ending <=> ending_option.curr;
    property <[string]> color_name: [
        "Black",
        "Blue",
        "Green",
        "Cyan",
        "Red",
        "Magenta",
        "Brown",
        "Light Gray",
        "Dark Gray",
        "Light Blue",
        "Light Green",
        "Light Cyan",
        "Light Red",
        "Light Magenta",
        "Yellow",
        "White"
    ];
    VerticalBox {
        spacing: 0px;
        text_color := OptionComboBox {
            title: "Text Color:";
            values: color-name;
        }
        font_color := OptionComboBox {
            title: "Font Color:";
            values: color-name;
            set-index: 15;
        }
        ending_option := OptionComboBox {
            title: "Ending:";
            values: ["BSOD", "Reboot", "Nothing"];
        }
    }
}

component BuildInfo {
    VerticalBox {
        spacing: 10px;
        Button {
            text: "Build";
            clicked => {
                CustomNoteBuilder-Logic.build();
            }
        }
        Button {
            text: "Info";
            clicked => {
                CustomNoteBuilder-Logic.info-pressed();
            }
        }
    }
}

export component MainWindow inherits Window {
    out property <string> boot_msg <=> boot_screen.msg;
    out property <string> text_color <=> options.text;
    out property <string> font_color <=> options.font;
    out property <string> ending_option <=> options.ending;
    out property <image> icon_data <=> icon.load_path;
    title: "Custom Note Builder";
    default-font-family: "Segoe UI";
    width: 609px;
    height: 426px;
    HorizontalLayout {
        spacing: 0px;
        GridLayout {
            padding: 5px;
            Row {
                icon := IconStatus {}
            }
            Row {
                IconFunc {
                    col: 1;
                    row: 0;
                }
            }
            Row {
                options := CustomOption {
                    col: 2;
                    row: 0;
                }
            }
            Row {
                BuildInfo {
                    col: 3;
                    row: 0;
                }
            }
        }
    }

    HorizontalLayout {
        spacing: 0px;
        alignment: center;
        VerticalLayout {
            alignment:center; 
            Rectangle{
                height: 100px;
                background : transparent;
            }
            boot_screen := BootloaderScreen {
                out property <string> msg <=> self.text;
                text-color-index: options.text-index;
                font-color-index: options.font-index;
            }
        }
    }
}
